==========================
========== TODO ==========

===== STRUCTURE =====
* Dashboard!!!
	-> Implémenter définitivement les dashboards
	-> Sérialiser les dashboards (où ?)
	-> Tester que la sérialisation des messages se fait bien


===== INITIALIZE =====
2) Login
* Implémenter une boucle pour qu'à chaque logout, on retourne au menu login plutôt que de fermer l'application complètement.


===== MAIN MENU =====
2) Menu Projects -> ProjectsMenuController (actuellement HomeMenuController)

1 - Project1
2 - Mon Projet
3 - Create project
4 - Back

* Affiche la liste des projets *de l'utilisateur*
	-> le constructeur n'embarque QUE activeUser

	* À la sélection d'un projet, on affiche le menu du projet (voir ProjectController)
		-> Menu Info 			(DONE)
		-> Menu Dashboard
		-> Menu Task 			(DONE)
		-> Menu Documents
			-> comme pour Task, ne pas afficher l'option si le dossier est vide
			-> exemple : if (new File(project.getPathToProject()).listFiles() != null))
		-> Modifier 			(DONE)
		-> Supprimer 			(DONE)

* Menu pour créer un projet 		(DONE)
	-> Créer un nouveau projet vierge dans un dossier que l'on fixera
		ex : ./projects/[nom du projet entré par l'user]
	-> (Bonus) Importer un dossier déjà existant

2b) Menu Dashboard
* Restructurer Dashboard.java en MVC
* Afficher tous les messages du plus récent au plus ancien
* (Bonus)Implémenter un système de réponse
* (Bonus)Implémenter un système de pagination

2d) Menu Documents
* Afficher la liste des fichiers dans le dossier correspondant au projet (affichage récursif, exemple : src, src/Test.java, ...)
* Fonction récursive 
printAllFiles(String folder, int nbRecursions) {
	File current = new File(folder);
	println("\t") * nbRecursions;
	if (current.isDirectory()) {
		println(current.baseName);
		printAllFiles(current);
	}
	else println(current.baseName);
}


==========================
========== DONE ==========

===== STRUCTURE =====
* Users and Contacts
	* Contact va devenir une classe contenant uniquement les informations de contact (mail, phone, etc.)
	* Supprimer le champ User de Contact
	* Ajouter un champ private Contact contactInfo dans User
* Messages and Replies
	* Enlever la sous-classe Reply (commenter)
* Task
	* À sérialiser au sein des Project
	* NE PAS stocker les Tasks dans la HashMap globale de SystemData
* Document
	* À supprimer
	* Mettre à jour UserListenerManager.updateDoc(Document document) pour ne plus manipuler d'objet Document. (Supprimer la classe ?)
* Project
	* Ajouter un champ String avec le chemin du dossier à observer
	* exemple : defaultPath + "/" + projectName
	* exemple (bonus import de projet) : "C:/Users/..."
	* Ce champ servira pour les Observer : si j'observe ce Project, je dois observer le dossier à cet emplacement.
	* Note : notre dossier ressemblera donc à ça :

	views.PenelopeF
		|_ src...
		|_ projects
			|_ 12345b-dejfr5.json
			|_ ... .json
			|_ Project1
				|_ ... fichiers divers
			|_ Mon Projet
				|_ ... fichiers divers

* User.generatePassword -> déplacer ça dans un tools.PasswordTools
* User : à la création du username, vérifier qu'il est bien UNIQUE
* User : retirer la virgule dans le message pour éviter toute confusion
* saveData() : idéalement, il faudrait save à chaque modification importante
	-> Exemple : création d'un projet, il faudrait save les users qui y ont accès
	-> Fait pour le menu Create Project, identifier d'autres endroits où ce sera nécessaire
	-> L'appel à repositories.saveData() devra être fait depuis un *Controller*.
* UserSystem, le gros chantier :
	-> Plusieurs fonctions auraient leur place dans un UserSystemView (voir TODO de la fonction createUser)
	-> Renommer en Admin.java ?
	-> Structurer ça en MVC
	-> Est-il toujours nécessaire d'en faire un champ de SystemData ?
		-> A priori non, plus besoin car SystemData contient déjà toutes les données nécessaires.
		-> Supprimer le champ admin dans SystemData
	-> Conclusion : cette classe ne devrait que contenir des méthodes pour l'admin.
* systemData, à passer en static ?
	-> Permet d'accéder à la classe à tout moment pour la traduction UUID -> Object
	-> Nécessaire pour vérifier si un username ou un nom de groupe existe déjà
* Contact : pouvoir remplir les informations dans un menu profil
* Des champs de certaines classes sont à null après la déserialisation. Il faudrait les supprimer car on ne s'en sert pas directement/on peut récupérer les objets via leur ID dans SystemData
	-> Liste de champs à supprimer :
		- Group.users
		- Project.group


===== INITIALIZE =====
1) Deserialize and load
* Créer une classe parente ou une interface Repository, dont hériteront les 4 repos
* Repository: doit serialiser et deserialiser, déplacer ça depuis SystemData
	-> Inclure SystemData dans les repos (constructeur)
	-> Implémenter serialization pour User Group et Message 
* Instancier les Repos depuis le main, faire les appels aux fonctions load depuis le main (déplacer la fonction loadSystemData)

2) Login
* Constructeur de Login : passer le SystemData en paramètre
* Retour de la fonction login : construire l'activeUser en chargeant les groups, projects etc. nécessaires depuis le SystemData


===== MAIN MENU =====
1) Menu Groups -> GroupMenuController
* Créer un controller pour ce menu (embarque le SystemData)
* Afficher tous les groupes.
* À la sélection d'un groupe, afficher tous ses membres.
* À la sélection d'un user, afficher sa fiche contact (nom complet, contactInfo...)

2a) Menu Info (DONE ALL)
* Renommer l'élément GROUP en INFO
* Afficher les infos du projet : nom, description, date de création, *groupes*

2c) Menu Task (DONE ALL)
* Afficher toutes les tasks
* À la sélection d'une task :
	* afficher ses infos
	* renommer
	* delete
* Sous-menu créer une nouvelle tâche

3) Menu Admin
* Contient :
	- créer un nouvel user
		-> username UNIQUE
	- créer un nouveau groupe
		-> groupname UNIQUE
	- ajouter un user dans un groupe
	- reset le mot de passe d'un user
	- supprimer un user ou un groupe

* Afficher uniquement si activeUser a des droits d'admin (fait en mode test)
* *Inversement, l'admin n'a pas accès aux deux autres menus*

4) Menu Profil (partagé avec Admin ?)
* Changer son mot de passe
* Changer son email
* Changer son téléphone